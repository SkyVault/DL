!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
${OBJ}	Makefile	/^${OBJ}: config.h config.mk$/;"	t
.c.o	Makefile	/^.c.o:$/;"	t
Arg	dwm.c	/^} Arg;$/;"	t	typeref:union:__anon0f53a99e060a	file:
BARTAB_BORDERS	config.h	/^#define BARTAB_BORDERS /;"	d
BARTAB_BOTTOMBORDER	config.h	/^#define BARTAB_BOTTOMBORDER /;"	d
BARTAB_TAGSINDICATOR	config.h	/^#define BARTAB_TAGSINDICATOR /;"	d
BARTAB_TAGSPX	config.h	/^#define BARTAB_TAGSPX /;"	d
BARTAB_TAGSROWS	config.h	/^#define BARTAB_TAGSROWS /;"	d
BETWEEN	util.h	/^#define BETWEEN(/;"	d
BUGS	dwm.1	/^.SH BUGS$/;"	s	title:DWM
BUTTONMASK	dwm.c	/^#define BUTTONMASK /;"	d	file:
Button	dwm.c	/^} Button;$/;"	t	typeref:struct:__anon0f53a99e0708	file:
CC	config.mk	/^CC = cc$/;"	m
CFLAGS	config.mk	/^CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -Os ${INCS} ${CPPFLAGS}$/;"	m
CLEANMASK	dwm.c	/^#define CLEANMASK(/;"	d	file:
CPPFLAGS	config.mk	/^CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\\"${VERSION}\\" /;"	m
CUSTOMIZATION	dwm.1	/^.SH CUSTOMIZATION$/;"	s	title:DWM
Client	dwm.c	/^struct Client {$/;"	s	file:
Client	dwm.c	/^typedef struct Client Client;$/;"	t	typeref:struct:Client	file:
ClkClientWin	dwm.c	/^  ClkClientWin,$/;"	e	enum:__anon0f53a99e0503	file:
ClkLast	dwm.c	/^  ClkLast$/;"	e	enum:__anon0f53a99e0503	file:
ClkLtSymbol	dwm.c	/^  ClkLtSymbol,$/;"	e	enum:__anon0f53a99e0503	file:
ClkRootWin	dwm.c	/^  ClkRootWin,$/;"	e	enum:__anon0f53a99e0503	file:
ClkStatusText	dwm.c	/^  ClkStatusText,$/;"	e	enum:__anon0f53a99e0503	file:
ClkTagBar	dwm.c	/^  ClkTagBar,$/;"	e	enum:__anon0f53a99e0503	file:
ClkWinTitle	dwm.c	/^  ClkWinTitle,$/;"	e	enum:__anon0f53a99e0503	file:
Clr	drw.h	/^typedef XftColor Clr;$/;"	t	typeref:typename:XftColor
ColBg	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon0f5116480203
ColBorder	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon0f5116480203
ColFg	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon0f5116480203
Cur	drw.h	/^} Cur;$/;"	t	typeref:struct:__anon0f5116480108
CurLast	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
CurMove	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
CurNormal	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
CurResize	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
DESCRIPTION	dwm.1	/^.SH DESCRIPTION$/;"	s	title:DWM
DRAWCLASSICTAGS	config.h	/^#define DRAWCLASSICTAGS /;"	d
DRAWTAGGRID	config.h	/^#define DRAWTAGGRID /;"	d
DWM	dwm.1	/^.TH DWM 1 dwm\\-VERSION$/;"	t
Drw	drw.h	/^} Drw;$/;"	t	typeref:struct:__anon0f5116480308
FREETYPEINC	config.mk	/^FREETYPEINC = \/usr\/include\/freetype2$/;"	m
FREETYPELIBS	config.mk	/^FREETYPELIBS = -lfontconfig -lXft$/;"	m
Fnt	drw.h	/^typedef struct Fnt {$/;"	s
Fnt	drw.h	/^} Fnt;$/;"	t	typeref:struct:Fnt
HEIGHT	dwm.c	/^#define HEIGHT(/;"	d	file:
INCS	config.mk	/^INCS = -I${X11INC} -I${FREETYPEINC}$/;"	m
INTERSECT	dwm.c	/^#define INTERSECT(/;"	d	file:
ISSUES	dwm.1	/^.SH ISSUES$/;"	s	title:DWM
ISVISIBLE	dwm.c	/^#define ISVISIBLE(/;"	d	file:
Key	dwm.c	/^} Key;$/;"	t	typeref:struct:__anon0f53a99e0808	file:
LDFLAGS	config.mk	/^LDFLAGS  = ${LIBS}$/;"	m
LENGTH	dwm.c	/^#define LENGTH(/;"	d	file:
LIBS	config.mk	/^LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lX11-xcb -lxcb -lxcb-res$/;"	m
Layout	dwm.c	/^} Layout;$/;"	t	typeref:struct:__anon0f53a99e0908	file:
MANPREFIX	config.mk	/^MANPREFIX = ${PREFIX}\/share\/man$/;"	m
MAX	util.h	/^#define MAX(/;"	d
MIN	util.h	/^#define MIN(/;"	d
MODKEY	config.h	/^#define MODKEY /;"	d
MODKEY	default-config.h	/^#define MODKEY /;"	d
MOUSEMASK	dwm.c	/^#define MOUSEMASK /;"	d	file:
Monitor	dwm.c	/^struct Monitor {$/;"	s	file:
Monitor	dwm.c	/^typedef struct Monitor Monitor;$/;"	t	typeref:struct:Monitor	file:
NAME	dwm.1	/^.SH NAME$/;"	s	title:DWM
NetActiveWindow	dwm.c	/^  NetActiveWindow,$/;"	e	enum:__anon0f53a99e0303	file:
NetClientList	dwm.c	/^  NetClientList,$/;"	e	enum:__anon0f53a99e0303	file:
NetLast	dwm.c	/^  NetLast$/;"	e	enum:__anon0f53a99e0303	file:
NetSupported	dwm.c	/^  NetSupported,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMCheck	dwm.c	/^  NetWMCheck,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMFullscreen	dwm.c	/^  NetWMFullscreen,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMName	dwm.c	/^  NetWMName,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMState	dwm.c	/^  NetWMState,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMWindowType	dwm.c	/^  NetWMWindowType,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMWindowTypeDialog	dwm.c	/^  NetWMWindowTypeDialog,$/;"	e	enum:__anon0f53a99e0303	file:
NumTags	dwm.c	/^struct NumTags {$/;"	s	file:
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OPTIONS	dwm.1	/^.SH OPTIONS$/;"	s	title:DWM
PREFIX	config.mk	/^PREFIX = \/usr\/local$/;"	m
Rule	dwm.c	/^} Rule;$/;"	t	typeref:struct:__anon0f53a99e0a08	file:
SEE	dwm.1	/^.SH SEE ALSO$/;"	s	title:DWM
SHCMD	config.h	/^#define SHCMD(/;"	d
SHCMD	default-config.h	/^#define SHCMD(/;"	d
SRC	Makefile	/^SRC = drw.c dwm.c util.c$/;"	m
STATUSBAR_TEXT_BUFFER_SIZE	dwm.c	/^#define STATUSBAR_TEXT_BUFFER_SIZE /;"	d	file:
SWITCHTAG_DOWN	config.h	/^#define SWITCHTAG_DOWN /;"	d
SWITCHTAG_LEFT	config.h	/^#define SWITCHTAG_LEFT /;"	d
SWITCHTAG_RIGHT	config.h	/^#define SWITCHTAG_RIGHT /;"	d
SWITCHTAG_TAG	config.h	/^#define SWITCHTAG_TAG /;"	d
SWITCHTAG_TOGGLETAG	config.h	/^#define SWITCHTAG_TOGGLETAG /;"	d
SWITCHTAG_TOGGLEVIEW	config.h	/^#define SWITCHTAG_TOGGLEVIEW /;"	d
SWITCHTAG_UP	config.h	/^#define SWITCHTAG_UP /;"	d
SWITCHTAG_VIEW	config.h	/^#define SWITCHTAG_VIEW /;"	d
SYNOPSIS	dwm.1	/^.SH SYNOPSIS$/;"	s	title:DWM
SchemeInfoNorm	dwm.c	/^  SchemeInfoNorm,$/;"	e	enum:__anon0f53a99e0203	file:
SchemeInfoSel	dwm.c	/^  SchemeInfoSel,$/;"	e	enum:__anon0f53a99e0203	file:
SchemeNorm	dwm.c	/^  SchemeNorm,$/;"	e	enum:__anon0f53a99e0203	file:
SchemeSel	dwm.c	/^  SchemeSel,$/;"	e	enum:__anon0f53a99e0203	file:
SchemeStatus	dwm.c	/^  SchemeStatus,$/;"	e	enum:__anon0f53a99e0203	file:
SchemeTabActive	dwm.c	/^  SchemeTabActive,$/;"	e	enum:__anon0f53a99e0203	file:
SchemeTabInactive	dwm.c	/^  SchemeTabInactive$/;"	e	enum:__anon0f53a99e0203	file:
SchemeTagsNorm	dwm.c	/^  SchemeTagsNorm,$/;"	e	enum:__anon0f53a99e0203	file:
SchemeTagsSel	dwm.c	/^  SchemeTagsSel,$/;"	e	enum:__anon0f53a99e0203	file:
TAGKEYS	config.h	/^#define TAGKEYS(/;"	d
TAGKEYS	default-config.h	/^#define TAGKEYS(/;"	d
TAGMASK	dwm.c	/^#define TAGMASK /;"	d	file:
TEXTW	dwm.c	/^#define TEXTW(/;"	d	file:
USAGE	dwm.1	/^.SH USAGE$/;"	s	title:DWM
UTF_INVALID	drw.c	/^#define UTF_INVALID /;"	d	file:
UTF_SIZ	drw.c	/^#define UTF_SIZ /;"	d	file:
VERSION	config.mk	/^VERSION = 6.2$/;"	m
VOLUME_STEP	config.h	/^#define VOLUME_STEP /;"	d
WIDTH	dwm.c	/^#define WIDTH(/;"	d	file:
WMDelete	dwm.c	/^  WMDelete,$/;"	e	enum:__anon0f53a99e0403	file:
WMLast	dwm.c	/^  WMLast$/;"	e	enum:__anon0f53a99e0403	file:
WMProtocols	dwm.c	/^  WMProtocols,$/;"	e	enum:__anon0f53a99e0403	file:
WMState	dwm.c	/^  WMState,$/;"	e	enum:__anon0f53a99e0403	file:
WMTakeFocus	dwm.c	/^  WMTakeFocus,$/;"	e	enum:__anon0f53a99e0403	file:
X11INC	config.mk	/^X11INC = \/usr\/X11R6\/include$/;"	m
X11LIB	config.mk	/^X11LIB = \/usr\/X11R6\/lib$/;"	m
XINERAMAFLAGS	config.mk	/^XINERAMAFLAGS = -DXINERAMA$/;"	m
XINERAMALIBS	config.mk	/^XINERAMALIBS  = -lXinerama$/;"	m
__anon0f5116480108	drw.h	/^typedef struct {$/;"	s
__anon0f5116480203	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	g
__anon0f5116480308	drw.h	/^typedef struct {$/;"	s
__anon0f53a99e0103	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	g	file:
__anon0f53a99e0203	dwm.c	/^enum {$/;"	g	file:
__anon0f53a99e0303	dwm.c	/^enum {$/;"	g	file:
__anon0f53a99e0403	dwm.c	/^enum {$/;"	g	file:
__anon0f53a99e0503	dwm.c	/^enum {$/;"	g	file:
__anon0f53a99e060a	dwm.c	/^typedef union {$/;"	u	file:
__anon0f53a99e0708	dwm.c	/^typedef struct {$/;"	s	file:
__anon0f53a99e0808	dwm.c	/^typedef struct {$/;"	s	file:
__anon0f53a99e0908	dwm.c	/^typedef struct {$/;"	s	file:
__anon0f53a99e0a08	dwm.c	/^typedef struct {$/;"	s	file:
all	Makefile	/^all: options dwm$/;"	t
applyrules	dwm.c	/^void applyrules(Client *c) {$/;"	f	typeref:typename:void
applysizehints	dwm.c	/^int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact) {$/;"	f	typeref:typename:int
arg	dwm.c	/^  const Arg arg;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:const Arg	file:
arg	dwm.c	/^  const Arg arg;$/;"	m	struct:__anon0f53a99e0808	typeref:typename:const Arg	file:
arrange	dwm.c	/^  void (*arrange)(Monitor *);$/;"	m	struct:__anon0f53a99e0908	typeref:typename:void (*)(Monitor *)	file:
arrange	dwm.c	/^void arrange(Monitor *m) {$/;"	f	typeref:typename:void
arrangemon	dwm.c	/^void arrangemon(Monitor *m) {$/;"	f	typeref:typename:void
attach	dwm.c	/^void attach(Client *c) {$/;"	f	typeref:typename:void
attachstack	dwm.c	/^void attachstack(Client *c) {$/;"	f	typeref:typename:void
autostart	config.h	/^static const char *const autostart[] = {$/;"	v	typeref:typename:const char * const[]
autostart_exec	dwm.c	/^void autostart_exec(void) {$/;"	f	typeref:typename:void
autostart_len	dwm.c	/^static size_t autostart_len;$/;"	v	typeref:typename:size_t	file:
autostart_pids	dwm.c	/^static pid_t *autostart_pids;$/;"	v	typeref:typename:pid_t *	file:
bartabcalculate	dwm.c	/^void bartabcalculate(Monitor *m, int offx, int sw, int passx,$/;"	f	typeref:typename:void
bartabdraw	dwm.c	/^void bartabdraw(Monitor *m, Client *c, int unused, int x, int w,$/;"	f	typeref:typename:void
bartabfloatfns	config.h	/^static void (*bartabfloatfns[])(Monitor *) = {NULL};$/;"	v	typeref:typename:void (* [])(Monitor *)
bartabmonfns	config.h	/^static void (*bartabmonfns[])(Monitor *) = {monocle};$/;"	v	typeref:typename:void (* [])(Monitor *)
barwin	dwm.c	/^  Window barwin;$/;"	m	struct:Monitor	typeref:typename:Window	file:
baseh	dwm.c	/^  int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
basew	dwm.c	/^  int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
battabclick	dwm.c	/^void battabclick(Monitor *m, Client *c, int passx, int x, int w, int unused) {$/;"	f	typeref:typename:void
bh	dwm.c	/^static int bh, blw = 0; \/* bar geometry *\/$/;"	v	typeref:typename:int	file:
blw	dwm.c	/^static int bh, blw = 0; \/* bar geometry *\/$/;"	v	typeref:typename:int	file:
borderpx	config.h	/^static const unsigned int borderpx = 4; \/* border pixel of windows *\/$/;"	v	typeref:typename:const unsigned int
borderpx	default-config.h	/^static const unsigned int borderpx  = 1;        \/* border pixel of windows *\/$/;"	v	typeref:typename:const unsigned int
broken	dwm.c	/^static const char broken[] = "broken";$/;"	v	typeref:typename:const char[]	file:
button	dwm.c	/^  unsigned int button;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:unsigned int	file:
buttonpress	dwm.c	/^void buttonpress(XEvent *e) {$/;"	f	typeref:typename:void
buttons	config.h	/^static Button buttons[] = {$/;"	v	typeref:typename:Button[]
buttons	default-config.h	/^static Button buttons[] = {$/;"	v	typeref:typename:Button[]
bw	dwm.c	/^  int bw, oldbw;$/;"	m	struct:Client	typeref:typename:int	file:
by	dwm.c	/^  int by;             \/* bar geometry *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
centeredfloatingmaster	dwm.c	/^void centeredfloatingmaster(Monitor *m) {$/;"	f	typeref:typename:void
centeredmaster	dwm.c	/^void centeredmaster(Monitor *m) {$/;"	f	typeref:typename:void
checkotherwm	dwm.c	/^void checkotherwm(void) {$/;"	f	typeref:typename:void
class	dwm.c	/^  const char *class;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char *	file:
clean	Makefile	/^clean:$/;"	t
cleanup	dwm.c	/^void cleanup(void) {$/;"	f	typeref:typename:void
cleanupmon	dwm.c	/^void cleanupmon(Monitor *mon) {$/;"	f	typeref:typename:void
click	dwm.c	/^  unsigned int click;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:unsigned int	file:
clientmessage	dwm.c	/^void clientmessage(XEvent *e) {$/;"	f	typeref:typename:void
clients	dwm.c	/^  Client *clients;$/;"	m	struct:Monitor	typeref:typename:Client *	file:
col_cyan	default-config.h	/^static const char col_cyan[]        = "#005577";$/;"	v	typeref:typename:const char[]
col_gray1	config.h	/^static const char col_gray1[] = "#222222";$/;"	v	typeref:typename:const char[]
col_gray1	default-config.h	/^static const char col_gray1[]       = "#222222";$/;"	v	typeref:typename:const char[]
col_gray2	config.h	/^static const char col_gray2[] = "#444444";$/;"	v	typeref:typename:const char[]
col_gray2	default-config.h	/^static const char col_gray2[]       = "#444444";$/;"	v	typeref:typename:const char[]
col_gray3	config.h	/^static const char col_gray3[] = "#bbbbbb";$/;"	v	typeref:typename:const char[]
col_gray3	default-config.h	/^static const char col_gray3[]       = "#bbbbbb";$/;"	v	typeref:typename:const char[]
col_gray4	config.h	/^static const char col_gray4[] = "#eeeeee";$/;"	v	typeref:typename:const char[]
col_gray4	default-config.h	/^static const char col_gray4[]       = "#eeeeee";$/;"	v	typeref:typename:const char[]
col_main	config.h	/^static const char col_main[] = "#007788";$/;"	v	typeref:typename:const char[]
colors	config.h	/^static const char *colors[][3] = {$/;"	v	typeref:typename:const char * [][3]
colors	default-config.h	/^static const char *colors[][3]      = {$/;"	v	typeref:typename:const char * [][3]
config.h	Makefile	/^config.h:$/;"	t
configure	dwm.c	/^void configure(Client *c) {$/;"	f	typeref:typename:void
configurenotify	dwm.c	/^void configurenotify(XEvent *e) {$/;"	f	typeref:typename:void
configurerequest	dwm.c	/^void configurerequest(XEvent *e) {$/;"	f	typeref:typename:void
createmon	dwm.c	/^Monitor *createmon(void) {$/;"	f	typeref:typename:Monitor *
cursor	drw.h	/^	Cursor cursor;$/;"	m	struct:__anon0f5116480108	typeref:typename:Cursor
cursor	dwm.c	/^static Cur *cursor[CurLast];$/;"	v	typeref:typename:Cur * []	file:
cyclelayout	dwm.c	/^void cyclelayout(const Arg *arg) {$/;"	f	typeref:typename:void
defaultgaps	dwm.c	/^void defaultgaps(const Arg *arg) { setgaps(gappoh, gappov, gappih, gappiv); }$/;"	f	typeref:typename:void
destroynotify	dwm.c	/^void destroynotify(XEvent *e) {$/;"	f	typeref:typename:void
detach	dwm.c	/^void detach(Client *c) {$/;"	f	typeref:typename:void
detachstack	dwm.c	/^void detachstack(Client *c) {$/;"	f	typeref:typename:void
die	util.c	/^die(const char *fmt, ...) {$/;"	f	typeref:typename:void
dirtomon	dwm.c	/^Monitor *dirtomon(int dir) {$/;"	f	typeref:typename:Monitor *
dist	Makefile	/^dist: clean$/;"	t
dmenucmd	config.h	/^static const char *dmenucmd[] = {$/;"	v	typeref:typename:const char * []
dmenucmd	default-config.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray/;"	v	typeref:typename:const char * []
dmenuemojicmd	config.h	/^static const char *dmenuemojicmd[] = {"dmenu-emoji", NULL};$/;"	v	typeref:typename:const char * []
dmenufont	config.h	/^static const char dmenufont[] = "monospace:size=10";$/;"	v	typeref:typename:const char[]
dmenufont	default-config.h	/^static const char dmenufont[]       = "monospace:size=10";$/;"	v	typeref:typename:const char[]
dmenumon	config.h	/^static char dmenumon[2] =$/;"	v	typeref:typename:char[2]
dmenumon	default-config.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v	typeref:typename:char[2]
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:Fnt	typeref:typename:Display *
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:__anon0f5116480308	typeref:typename:Display *
dpy	dwm.c	/^static Display *dpy;$/;"	v	typeref:typename:Display *	file:
draw_rectangle	drw.c	/^draw_rectangle(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int color) { $/;"	f	typeref:typename:void
drawable	drw.h	/^	Drawable drawable;$/;"	m	struct:__anon0f5116480308	typeref:typename:Drawable
drawbar	dwm.c	/^void drawbar(Monitor *m) {$/;"	f	typeref:typename:void
drawbars	dwm.c	/^void drawbars(void) {$/;"	f	typeref:typename:void
drawstatusbar	dwm.c	/^int drawstatusbar(Monitor *m, int bh, char *stext) {$/;"	f	typeref:typename:int
drawtaggrid	dwm.c	/^void drawtaggrid(Monitor *m, int *x_pos, unsigned int occ) {$/;"	f	typeref:typename:void
drawtagmask	config.h	/^static const unsigned int drawtagmask =$/;"	v	typeref:typename:const unsigned int
drw	dwm.c	/^static Drw *drw;$/;"	v	typeref:typename:Drw *	file:
drw_clr_create	drw.c	/^drw_clr_create(Drw *drw, Clr *dest, const char *clrname)$/;"	f	typeref:typename:void
drw_create	drw.c	/^drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h)$/;"	f	typeref:typename:Drw *
drw_cur_create	drw.c	/^drw_cur_create(Drw *drw, int shape)$/;"	f	typeref:typename:Cur *
drw_cur_free	drw.c	/^drw_cur_free(Drw *drw, Cur *cursor)$/;"	f	typeref:typename:void
drw_font_getexts	drw.c	/^drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned int *w, unsigned int *h/;"	f	typeref:typename:void
drw_fontset_create	drw.c	/^drw_fontset_create(Drw* drw, const char *fonts[], size_t fontcount)$/;"	f	typeref:typename:Fnt *
drw_fontset_free	drw.c	/^drw_fontset_free(Fnt *font)$/;"	f	typeref:typename:void
drw_fontset_getwidth	drw.c	/^drw_fontset_getwidth(Drw *drw, const char *text)$/;"	f	typeref:typename:unsigned int
drw_free	drw.c	/^drw_free(Drw *drw)$/;"	f	typeref:typename:void
drw_map	drw.c	/^drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h)$/;"	f	typeref:typename:void
drw_rect	drw.c	/^drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert)$/;"	f	typeref:typename:void
drw_resize	drw.c	/^drw_resize(Drw *drw, unsigned int w, unsigned int h)$/;"	f	typeref:typename:void
drw_scm_create	drw.c	/^drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount)$/;"	f	typeref:typename:Clr *
drw_setfontset	drw.c	/^drw_setfontset(Drw *drw, Fnt *set)$/;"	f	typeref:typename:void
drw_setscheme	drw.c	/^drw_setscheme(Drw *drw, Clr *scm)$/;"	f	typeref:typename:void
drw_text	drw.c	/^drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lpad, const char */;"	f	typeref:typename:int
dwm	Makefile	/^dwm: ${OBJ}$/;"	t
ecalloc	util.c	/^ecalloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
enablegaps	dwm.c	/^static int enablegaps = 1;$/;"	v	typeref:typename:int	file:
enternotify	dwm.c	/^void enternotify(XEvent *e) {$/;"	f	typeref:typename:void
expose	dwm.c	/^void expose(XEvent *e) {$/;"	f	typeref:typename:void
f	dwm.c	/^  float f;$/;"	m	union:__anon0f53a99e060a	typeref:typename:float	file:
focus	dwm.c	/^void focus(Client *c) {$/;"	f	typeref:typename:void
focusin	dwm.c	/^void focusin(XEvent *e) {$/;"	f	typeref:typename:void
focusmon	dwm.c	/^void focusmon(const Arg *arg) {$/;"	f	typeref:typename:void
focusstack	dwm.c	/^void focusstack(const Arg *arg) {$/;"	f	typeref:typename:void
fonts	config.h	/^static const char *fonts[] = {"monospace:size=10"};$/;"	v	typeref:typename:const char * []
fonts	default-config.h	/^static const char *fonts[]          = { "monospace:size=10" };$/;"	v	typeref:typename:const char * []
fonts	drw.h	/^	Fnt *fonts;$/;"	m	struct:__anon0f5116480308	typeref:typename:Fnt *
func	dwm.c	/^  void (*func)(const Arg *);$/;"	m	struct:__anon0f53a99e0808	typeref:typename:void (*)(const Arg *)	file:
func	dwm.c	/^  void (*func)(const Arg *arg);$/;"	m	struct:__anon0f53a99e0708	typeref:typename:void (*)(const Arg * arg)	file:
gappih	config.h	/^static const unsigned int gappih = 10; \/* horiz inner gap between windows *\/$/;"	v	typeref:typename:const unsigned int
gappih	dwm.c	/^  int gappih; \/* horizontal gap between windows *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gappiv	config.h	/^static const unsigned int gappiv = 10; \/* vert inner gap between windows *\/$/;"	v	typeref:typename:const unsigned int
gappiv	dwm.c	/^  int gappiv; \/* vertical gap between windows *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gappoh	config.h	/^static const unsigned int gappoh =$/;"	v	typeref:typename:const unsigned int
gappoh	dwm.c	/^  int gappoh; \/* horizontal outer gaps *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gappov	config.h	/^static const unsigned int gappov =$/;"	v	typeref:typename:const unsigned int
gappov	dwm.c	/^  int gappov; \/* vertical outer gaps *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gc	drw.h	/^	GC gc;$/;"	m	struct:__anon0f5116480308	typeref:typename:GC
get_color_from_pywal	dwm.c	/^void get_color_from_pywal(char *out) {$/;"	f	typeref:typename:void
getatomprop	dwm.c	/^Atom getatomprop(Client *c, Atom prop) {$/;"	f	typeref:typename:Atom
getparentprocess	dwm.c	/^pid_t getparentprocess(pid_t p) {$/;"	f	typeref:typename:pid_t
getrootptr	dwm.c	/^int getrootptr(int *x, int *y) {$/;"	f	typeref:typename:int
getstate	dwm.c	/^long getstate(Window w) {$/;"	f	typeref:typename:long
gettextprop	dwm.c	/^int gettextprop(Window w, Atom atom, char *text, unsigned int size) {$/;"	f	typeref:typename:int
grabbuttons	dwm.c	/^void grabbuttons(Client *c, int focused) {$/;"	f	typeref:typename:void
grabkeys	dwm.c	/^void grabkeys(void) {$/;"	f	typeref:typename:void
h	drw.h	/^	unsigned int h;$/;"	m	struct:Fnt	typeref:typename:unsigned int
h	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon0f5116480308	typeref:typename:unsigned int
h	dwm.c	/^  int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
handler	dwm.c	/^static void (*handler[LASTEvent])(XEvent *) = {$/;"	v	typeref:typename:void (* [LASTEvent])(XEvent *)	file:
i	dwm.c	/^  int i;$/;"	m	union:__anon0f53a99e060a	typeref:typename:int	file:
inch	dwm.c	/^  int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
incnmaster	dwm.c	/^void incnmaster(const Arg *arg) {$/;"	f	typeref:typename:void
incrgaps	dwm.c	/^void incrgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrigaps	dwm.c	/^void incrigaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrihgaps	dwm.c	/^void incrihgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrivgaps	dwm.c	/^void incrivgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrogaps	dwm.c	/^void incrogaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrohgaps	dwm.c	/^void incrohgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrovgaps	dwm.c	/^void incrovgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incw	dwm.c	/^  int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
install	Makefile	/^install: all$/;"	t
instance	dwm.c	/^  const char *instance;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char *	file:
isdescprocess	dwm.c	/^int isdescprocess(pid_t p, pid_t c) {$/;"	f	typeref:typename:int
isfixed	dwm.c	/^  int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen,$/;"	m	struct:Client	typeref:typename:int	file:
isfloating	dwm.c	/^  int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen,$/;"	m	struct:Client	typeref:typename:int	file:
isfloating	dwm.c	/^  int isfloating;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:int	file:
isfullscreen	dwm.c	/^  int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen,$/;"	m	struct:Client	typeref:typename:int	file:
isterminal	dwm.c	/^      isterminal, noswallow;$/;"	m	struct:Client	typeref:typename:int	file:
isterminal	dwm.c	/^  int isterminal;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:int	file:
isuniquegeom	dwm.c	/^static int isuniquegeom(XineramaScreenInfo *unique, size_t n,$/;"	f	typeref:typename:int	file:
isurgent	dwm.c	/^  int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen,$/;"	m	struct:Client	typeref:typename:int	file:
keypress	dwm.c	/^void keypress(XEvent *e) {$/;"	f	typeref:typename:void
keys	config.h	/^static Key keys[] = {$/;"	v	typeref:typename:Key[]
keys	default-config.h	/^static Key keys[] = {$/;"	v	typeref:typename:Key[]
keysym	dwm.c	/^  KeySym keysym;$/;"	m	struct:__anon0f53a99e0808	typeref:typename:KeySym	file:
killclient	dwm.c	/^void killclient(const Arg *arg) {$/;"	f	typeref:typename:void
layouts	config.h	/^static const Layout layouts[] = {$/;"	v	typeref:typename:const Layout[]
layouts	default-config.h	/^static const Layout layouts[] = {$/;"	v	typeref:typename:const Layout[]
limitexceeded	dwm.c	/^  char limitexceeded[LENGTH(tags) > 31 ? -1 : 1];$/;"	m	struct:NumTags	typeref:typename:char[]	file:
lrpad	dwm.c	/^static int lrpad; \/* sum of left and right padding for text *\/$/;"	v	typeref:typename:int	file:
lt	dwm.c	/^  const Layout *lt[2];$/;"	m	struct:Monitor	typeref:typename:const Layout * [2]	file:
ltsymbol	dwm.c	/^  char ltsymbol[32];$/;"	m	struct:Monitor	typeref:typename:char[32]	file:
main	dwm.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	transient.c	/^int main(void) {$/;"	f	typeref:typename:int
manage	dwm.c	/^void manage(Window w, XWindowAttributes *wa) {$/;"	f	typeref:typename:void
mappingnotify	dwm.c	/^void mappingnotify(XEvent *e) {$/;"	f	typeref:typename:void
maprequest	dwm.c	/^void maprequest(XEvent *e) {$/;"	f	typeref:typename:void
mask	dwm.c	/^  unsigned int mask;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:unsigned int	file:
maxa	dwm.c	/^  float mina, maxa;$/;"	m	struct:Client	typeref:typename:float	file:
maxh	dwm.c	/^  int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
maxw	dwm.c	/^  int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
mfact	config.h	/^static const float mfact = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v	typeref:typename:const float
mfact	default-config.h	/^static const float mfact     = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v	typeref:typename:const float
mfact	dwm.c	/^  float mfact;$/;"	m	struct:Monitor	typeref:typename:float	file:
mh	dwm.c	/^  int mx, my, mw, mh; \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
mina	dwm.c	/^  float mina, maxa;$/;"	m	struct:Client	typeref:typename:float	file:
minh	dwm.c	/^  int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
minw	dwm.c	/^  int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
mod	dwm.c	/^  unsigned int mod;$/;"	m	struct:__anon0f53a99e0808	typeref:typename:unsigned int	file:
mon	dwm.c	/^  Monitor *mon;$/;"	m	struct:Client	typeref:typename:Monitor *	file:
monitor	dwm.c	/^  int monitor;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:int	file:
monocle	dwm.c	/^void monocle(Monitor *m) {$/;"	f	typeref:typename:void
mons	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	typeref:typename:Monitor *	file:
motionnotify	dwm.c	/^void motionnotify(XEvent *e) {$/;"	f	typeref:typename:void
movemouse	dwm.c	/^void movemouse(const Arg *arg) {$/;"	f	typeref:typename:void
mw	dwm.c	/^  int mx, my, mw, mh; \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
mx	dwm.c	/^  int mx, my, mw, mh; \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
my	dwm.c	/^  int mx, my, mw, mh; \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
name	dwm.c	/^  char name[256];$/;"	m	struct:Client	typeref:typename:char[256]	file:
netatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	typeref:typename:Atom[][]	file:
neverfocus	dwm.c	/^  int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen,$/;"	m	struct:Client	typeref:typename:int	file:
next	drw.h	/^	struct Fnt *next;$/;"	m	struct:Fnt	typeref:struct:Fnt *
next	dwm.c	/^  Client *next;$/;"	m	struct:Client	typeref:typename:Client *	file:
next	dwm.c	/^  Monitor *next;$/;"	m	struct:Monitor	typeref:typename:Monitor *	file:
nexttiled	dwm.c	/^Client *nexttiled(Client *c) {$/;"	f	typeref:typename:Client *
nmaster	config.h	/^static const int nmaster = 1;    \/* number of clients in master area *\/$/;"	v	typeref:typename:const int
nmaster	default-config.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v	typeref:typename:const int
nmaster	dwm.c	/^  int nmaster;$/;"	m	struct:Monitor	typeref:typename:int	file:
noswallow	dwm.c	/^      isterminal, noswallow;$/;"	m	struct:Client	typeref:typename:int	file:
noswallow	dwm.c	/^  int noswallow;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:int	file:
num	dwm.c	/^  int num;$/;"	m	struct:Monitor	typeref:typename:int	file:
numlockmask	dwm.c	/^static unsigned int numlockmask = 0;$/;"	v	typeref:typename:unsigned int	file:
oldbw	dwm.c	/^  int bw, oldbw;$/;"	m	struct:Client	typeref:typename:int	file:
oldh	dwm.c	/^  int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
oldstate	dwm.c	/^  int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen,$/;"	m	struct:Client	typeref:typename:int	file:
oldw	dwm.c	/^  int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
oldx	dwm.c	/^  int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
oldy	dwm.c	/^  int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
options	Makefile	/^options:$/;"	t
pattern	drw.h	/^	FcPattern *pattern;$/;"	m	struct:Fnt	typeref:typename:FcPattern *
pid	dwm.c	/^  pid_t pid;$/;"	m	struct:Client	typeref:typename:pid_t	file:
pop	dwm.c	/^void pop(Client *c) {$/;"	f	typeref:typename:void
propertynotify	dwm.c	/^void propertynotify(XEvent *e) {$/;"	f	typeref:typename:void
quit	dwm.c	/^void quit(const Arg *arg) {$/;"	f	typeref:typename:void
recttomon	dwm.c	/^Monitor *recttomon(int x, int y, int w, int h) {$/;"	f	typeref:typename:Monitor *
resize	dwm.c	/^void resize(Client *c, int x, int y, int w, int h, int interact) {$/;"	f	typeref:typename:void
resizeclient	dwm.c	/^void resizeclient(Client *c, int x, int y, int w, int h) {$/;"	f	typeref:typename:void
resizehints	config.h	/^static const int resizehints =$/;"	v	typeref:typename:const int
resizehints	default-config.h	/^static const int resizehints = 1;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v	typeref:typename:const int
resizemouse	dwm.c	/^void resizemouse(const Arg *arg) {$/;"	f	typeref:typename:void
restack	dwm.c	/^void restack(Monitor *m) {$/;"	f	typeref:typename:void
restart	dwm.c	/^static int restart = 0;$/;"	v	typeref:typename:int	file:
root	drw.h	/^	Window root;$/;"	m	struct:__anon0f5116480308	typeref:typename:Window
root	dwm.c	/^static Window root, wmcheckwin;$/;"	v	typeref:typename:Window	file:
rules	config.h	/^static const Rule rules[] = {$/;"	v	typeref:typename:const Rule[]
rules	default-config.h	/^static const Rule rules[] = {$/;"	v	typeref:typename:const Rule[]
run	dwm.c	/^void run(void) {$/;"	f	typeref:typename:void
running	dwm.c	/^static int running = 1;$/;"	v	typeref:typename:int	file:
scan	dwm.c	/^void scan(void) {$/;"	f	typeref:typename:void
scanner	dwm.c	/^static int scanner;$/;"	v	typeref:typename:int	file:
scheme	drw.h	/^	Clr *scheme;$/;"	m	struct:__anon0f5116480308	typeref:typename:Clr *
scheme	dwm.c	/^static Clr **scheme;$/;"	v	typeref:typename:Clr **	file:
scratchkey	dwm.c	/^  char scratchkey;$/;"	m	struct:Client	typeref:typename:char	file:
scratchkey	dwm.c	/^  const char scratchkey;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char	file:
scratchpadcmd	config.h	/^static const char *scratchpadcmd[] = {"s", "st", "-t", "scratchpad", NULL};$/;"	v	typeref:typename:const char * []
screen	drw.h	/^	int screen;$/;"	m	struct:__anon0f5116480308	typeref:typename:int
screen	dwm.c	/^static int screen;$/;"	v	typeref:typename:int	file:
sel	dwm.c	/^  Client *sel;$/;"	m	struct:Monitor	typeref:typename:Client *	file:
sellt	dwm.c	/^  unsigned int sellt;$/;"	m	struct:Monitor	typeref:typename:unsigned int	file:
selmon	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	typeref:typename:Monitor **	file:
seltags	dwm.c	/^  unsigned int seltags;$/;"	m	struct:Monitor	typeref:typename:unsigned int	file:
sendevent	dwm.c	/^int sendevent(Client *c, Atom proto) {$/;"	f	typeref:typename:int
sendmon	dwm.c	/^void sendmon(Client *c, Monitor *m) {$/;"	f	typeref:typename:void
setclientstate	dwm.c	/^void setclientstate(Client *c, long state) {$/;"	f	typeref:typename:void
setfocus	dwm.c	/^void setfocus(Client *c) {$/;"	f	typeref:typename:void
setfullscreen	dwm.c	/^void setfullscreen(Client *c, int fullscreen) {$/;"	f	typeref:typename:void
setgaps	dwm.c	/^void setgaps(int oh, int ov, int ih, int iv) {$/;"	f	typeref:typename:void
setlayout	dwm.c	/^void setlayout(const Arg *arg) {$/;"	f	typeref:typename:void
setmfact	dwm.c	/^void setmfact(const Arg *arg) {$/;"	f	typeref:typename:void
setup	dwm.c	/^void setup(void) {$/;"	f	typeref:typename:void
seturgent	dwm.c	/^void seturgent(Client *c, int urg) {$/;"	f	typeref:typename:void
sh	dwm.c	/^static int sw, sh;      \/* X display screen geometry width, height *\/$/;"	v	typeref:typename:int	file:
showbar	config.h	/^static const int showbar = 1;           \/* 0 means no bar *\/$/;"	v	typeref:typename:const int
showbar	default-config.h	/^static const int showbar            = 1;        \/* 0 means no bar *\/$/;"	v	typeref:typename:const int
showbar	dwm.c	/^  int showbar;$/;"	m	struct:Monitor	typeref:typename:int	file:
showhide	dwm.c	/^void showhide(Client *c) {$/;"	f	typeref:typename:void
sigchld	dwm.c	/^void sigchld(int unused) {$/;"	f	typeref:typename:void
sighup	dwm.c	/^void sighup(int unused) {$/;"	f	typeref:typename:void
sigterm	dwm.c	/^void sigterm(int unused) {$/;"	f	typeref:typename:void
smartgaps	config.h	/^static const int smartgaps =$/;"	v	typeref:typename:const int
snap	config.h	/^static const unsigned int snap = 16;    \/* snap pixel *\/$/;"	v	typeref:typename:const unsigned int
snap	default-config.h	/^static const unsigned int snap      = 32;       \/* snap pixel *\/$/;"	v	typeref:typename:const unsigned int
snext	dwm.c	/^  Client *snext;$/;"	m	struct:Client	typeref:typename:Client *	file:
spawn	dwm.c	/^void spawn(const Arg *arg) {$/;"	f	typeref:typename:void
spawnscratch	dwm.c	/^void spawnscratch(const Arg *arg) {$/;"	f	typeref:typename:void
stack	dwm.c	/^  Client *stack;$/;"	m	struct:Monitor	typeref:typename:Client *	file:
stext	dwm.c	/^static char stext[STATUSBAR_TEXT_BUFFER_SIZE] = {'\\0'};$/;"	v	typeref:typename:char[]	file:
sw	dwm.c	/^static int sw, sh;      \/* X display screen geometry width, height *\/$/;"	v	typeref:typename:int	file:
swallow	dwm.c	/^void swallow(Client *p, Client *c) {$/;"	f	typeref:typename:void
swallowfloating	config.h	/^static const int swallowfloating = 0;$/;"	v	typeref:typename:const int
swallowfloating	default-config.h	/^static const int swallowfloating    = 0;        \/* 1 means swallow floating windows by default /;"	v	typeref:typename:const int
swallowing	dwm.c	/^  Client *swallowing;$/;"	m	struct:Client	typeref:typename:Client *	file:
swallowingclient	dwm.c	/^Client *swallowingclient(Window w) {$/;"	f	typeref:typename:Client *
switchtag	dwm.c	/^void switchtag(const Arg *arg) {$/;"	f	typeref:typename:void
symbol	dwm.c	/^  const char *symbol;$/;"	m	struct:__anon0f53a99e0908	typeref:typename:const char *	file:
tag	dwm.c	/^void tag(const Arg *arg) {$/;"	f	typeref:typename:void
tagmon	dwm.c	/^void tagmon(const Arg *arg) {$/;"	f	typeref:typename:void
tagrows	config.h	/^static const int tagrows = 2;$/;"	v	typeref:typename:const int
tags	config.h	/^static const char *tags[] = {"1", "2", "3", "4", "5", "6", "7", "8"};$/;"	v	typeref:typename:const char * []
tags	default-config.h	/^static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };$/;"	v	typeref:typename:const char * []
tags	dwm.c	/^  unsigned int tags;$/;"	m	struct:Client	typeref:typename:unsigned int	file:
tags	dwm.c	/^  unsigned int tags;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:unsigned int	file:
tagset	dwm.c	/^  unsigned int tagset[2];$/;"	m	struct:Monitor	typeref:typename:unsigned int[2]	file:
termcmd	config.h	/^static const char *termcmd[] = {"st", NULL};$/;"	v	typeref:typename:const char * []
termcmd	default-config.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v	typeref:typename:const char * []
termforwin	dwm.c	/^Client *termforwin(const Client *w) {$/;"	f	typeref:typename:Client *
tile	dwm.c	/^void tile(Monitor *m) {$/;"	f	typeref:typename:void
title	dwm.c	/^  const char *title;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char *	file:
togglebar	dwm.c	/^void togglebar(const Arg *arg) {$/;"	f	typeref:typename:void
togglefloating	dwm.c	/^void togglefloating(const Arg *arg) {$/;"	f	typeref:typename:void
togglegaps	dwm.c	/^void togglegaps(const Arg *arg) {$/;"	f	typeref:typename:void
togglescratch	dwm.c	/^void togglescratch(const Arg *arg) {$/;"	f	typeref:typename:void
toggletag	dwm.c	/^void toggletag(const Arg *arg) {$/;"	f	typeref:typename:void
toggleview	dwm.c	/^void toggleview(const Arg *arg) {$/;"	f	typeref:typename:void
topbar	config.h	/^static const int topbar = 1;            \/* 0 means bottom bar *\/$/;"	v	typeref:typename:const int
topbar	default-config.h	/^static const int topbar             = 1;        \/* 0 means bottom bar *\/$/;"	v	typeref:typename:const int
topbar	dwm.c	/^  int topbar;$/;"	m	struct:Monitor	typeref:typename:int	file:
ui	dwm.c	/^  unsigned int ui;$/;"	m	union:__anon0f53a99e060a	typeref:typename:unsigned int	file:
unfocus	dwm.c	/^void unfocus(Client *c, int setfocus) {$/;"	f	typeref:typename:void
uninstall	Makefile	/^uninstall:$/;"	t
unmanage	dwm.c	/^void unmanage(Client *c, int destroyed) {$/;"	f	typeref:typename:void
unmapnotify	dwm.c	/^void unmapnotify(XEvent *e) {$/;"	f	typeref:typename:void
unswallow	dwm.c	/^void unswallow(Client *c) {$/;"	f	typeref:typename:void
updatebarpos	dwm.c	/^void updatebarpos(Monitor *m) {$/;"	f	typeref:typename:void
updatebars	dwm.c	/^void updatebars(void) {$/;"	f	typeref:typename:void
updateclientlist	dwm.c	/^void updateclientlist() {$/;"	f	typeref:typename:void
updategeom	dwm.c	/^int updategeom(void) {$/;"	f	typeref:typename:int
updatenumlockmask	dwm.c	/^void updatenumlockmask(void) {$/;"	f	typeref:typename:void
updatesizehints	dwm.c	/^void updatesizehints(Client *c) {$/;"	f	typeref:typename:void
updatestatus	dwm.c	/^void updatestatus(void) {$/;"	f	typeref:typename:void
updatetitle	dwm.c	/^void updatetitle(Client *c) {$/;"	f	typeref:typename:void
updatewindowtype	dwm.c	/^void updatewindowtype(Client *c) {$/;"	f	typeref:typename:void
updatewmhints	dwm.c	/^void updatewmhints(Client *c) {$/;"	f	typeref:typename:void
utf8decode	drw.c	/^utf8decode(const char *c, long *u, size_t clen)$/;"	f	typeref:typename:size_t	file:
utf8decodebyte	drw.c	/^utf8decodebyte(const char c, size_t *i)$/;"	f	typeref:typename:long	file:
utf8validate	drw.c	/^utf8validate(long *u, size_t i)$/;"	f	typeref:typename:size_t	file:
utfbyte	drw.c	/^static const unsigned char utfbyte[UTF_SIZ + 1] = {0x80,    0, 0xC0, 0xE0, 0xF0};$/;"	v	typeref:typename:const unsigned char[]	file:
utfmask	drw.c	/^static const unsigned char utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};$/;"	v	typeref:typename:const unsigned char[]	file:
utfmax	drw.c	/^static const long utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};$/;"	v	typeref:typename:const long[]	file:
utfmin	drw.c	/^static const long utfmin[UTF_SIZ + 1] = {       0,    0,  0x80,  0x800,  0x10000};$/;"	v	typeref:typename:const long[]	file:
v	dwm.c	/^  const void *v;$/;"	m	union:__anon0f53a99e060a	typeref:typename:const void *	file:
view	dwm.c	/^void view(const Arg *arg) {$/;"	f	typeref:typename:void
volume_down_cmd	config.h	/^static const char *volume_down_cmd[] = {"vol", "set", VOLUME_STEP "%-", NULL};$/;"	v	typeref:typename:const char * []
volume_up_cmd	config.h	/^static const char *volume_up_cmd[] = {"vol", "set", VOLUME_STEP "%+", NULL};$/;"	v	typeref:typename:const char * []
w	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon0f5116480308	typeref:typename:unsigned int
w	dwm.c	/^  int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
wh	dwm.c	/^  int wx, wy, ww, wh; \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
win	dwm.c	/^  Window win;$/;"	m	struct:Client	typeref:typename:Window	file:
winpid	dwm.c	/^pid_t winpid(Window w) {$/;"	f	typeref:typename:pid_t
wintoclient	dwm.c	/^Client *wintoclient(Window w) {$/;"	f	typeref:typename:Client *
wintomon	dwm.c	/^Monitor *wintomon(Window w) {$/;"	f	typeref:typename:Monitor *
wmatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	typeref:typename:Atom[]	file:
wmcheckwin	dwm.c	/^static Window root, wmcheckwin;$/;"	v	typeref:typename:Window	file:
ww	dwm.c	/^  int wx, wy, ww, wh; \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
wx	dwm.c	/^  int wx, wy, ww, wh; \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
wy	dwm.c	/^  int wx, wy, ww, wh; \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
x	dwm.c	/^  int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
xcon	dwm.c	/^static xcb_connection_t *xcon;$/;"	v	typeref:typename:xcb_connection_t *	file:
xerror	dwm.c	/^int xerror(Display *dpy, XErrorEvent *ee) {$/;"	f	typeref:typename:int
xerrordummy	dwm.c	/^int xerrordummy(Display *dpy, XErrorEvent *ee) { return 0; }$/;"	f	typeref:typename:int
xerrorstart	dwm.c	/^int xerrorstart(Display *dpy, XErrorEvent *ee) {$/;"	f	typeref:typename:int
xerrorxlib	dwm.c	/^static int (*xerrorxlib)(Display *, XErrorEvent *);$/;"	v	typeref:typename:int (*)(Display *,XErrorEvent *)	file:
xfont	drw.h	/^	XftFont *xfont;$/;"	m	struct:Fnt	typeref:typename:XftFont *
xfont_create	drw.c	/^xfont_create(Drw *drw, const char *fontname, FcPattern *fontpattern)$/;"	f	typeref:typename:Fnt *	file:
xfont_free	drw.c	/^xfont_free(Fnt *font)$/;"	f	typeref:typename:void	file:
y	dwm.c	/^  int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
zoom	dwm.c	/^void zoom(const Arg *arg) {$/;"	f	typeref:typename:void
