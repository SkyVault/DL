#+ Dustin's emacs config file

* Package Config

  #+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil) ; for a faster startup
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
  (package-initialize)
  #+END_SRC

Installing use-package for my package manager, only 
if it hasn't been installed

  #+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
    
  (eval-when-compile
    (require 'use-package))
  #+END_SRC

* Emacs Gui config
** Compilation buffer

    Colorize the compilation buffer

    #+BEGIN_SRC emacs-lisp
    (require 'ansi-color)
    (defun colorize-compilation-buffer ()
	(toggle-read-only)
	(ansi-color-apply-on-region compilation-filter-start (point))
	(toggle-read-only))
    (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
    #+END_SRC
** UI
  
    Removing all usless ui

    #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)

    (show-paren-mode 1)
    (save-place-mode 1)

    (setq inhibit-startup-screen t)
    #+END_SRC
    
    Transparency control
    
    #+BEGIN_SRC emacs-lisp
    (defun toggle-transparency ()
	(interactive)
	(let ((alpha (frame-parameter nil 'alpha)))
	    (set-frame-parameter
	    nil 'alpha
	    (if (eql (cond ((numberp alpha) alpha)
			    ((numberp (cdr alpha)) (cdr alpha))
			    ;; Also handle undocumented (<active> <inactive>) form.
			    ((numberp (cadr alpha)) (cadr alpha)))
		    100)
		'(85 . 50) '(100 . 100)))))
    (global-set-key (kbd "C-c t") 'toggle-transparency)
    (toggle-transparency) ;; Defaults to transparent
    #+END_SRC
   
   Color scheme
   
   #+BEGIN_SRC emacs-lisp
   (use-package moe-theme
     :ensure t
     :config)
   #+END_SRC

   #+RESULTS:
   : t
   
* Emacs behaviour
  
  Auto compile CTags file
  
  #+BEGIN_SRC emacs-lisp
  (setq tags-revert-without-query 1)
  (add-hook 'after-save-hook 'projectile-regenerate-tags)

  (defun build-ctags ()
    (interactive)
    (message "building project tags")
    (let ((root (eproject-root)))
	(shell-command
	    (concat "ctags -e -R --extra=+fq --exclude=.git -f " root "TAGS " root)))
    (visit-project-tags)
    (message "tags built successfully"))

  (defun visit-project-tags ()
    (interactive)
    (let ((tags-file (concat (eproject-root) "TAGS")))
	(visit-tags-table tags-file)
	(message (concat "Loaded " tags-file))))
  #+END_SRC
  
  Globally scale the text in all buffers
  
  #+BEGIN_SRC emacs-lisp
  (define-globalized-minor-mode 
    global-text-scale-mode
    text-scale-mode
    (lambda () (text-scale-mode 1)))
  
  (defun global-text-scale-adjust (inc) (interactive)
    (text-scale-set 1)
    (kill-local-variable 'text-scale-mode-amount)
    (setq-default text-scale-mode-amount (+ text-scale-mode-amount inc))
    (global-text-scale-mode 1))
    
  (global-set-key (kbd "M-0")
                  '(lambda () (interactive)
                     (global-text-scale-adjust (- text-scale-mode-amount))
                     (global-text-scale-mode -1)))
  (global-set-key (kbd "M-+")
                  '(lambda () (interactive) (global-text-scale-adjust 1)))
  (global-set-key (kbd "M--")
                  '(lambda () (interactive) (global-text-scale-adjust -1)))
  #+END_SRC
  
  Disable the backup files that emacs creates, we always use version control so its not that useful to have the backup files.

  #+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  #+END_SRC
  
  Grep tools
  
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c e") 'helm-projectile)
  #+END_SRC

* Language styles
** General

   #+BEGIN_SRC emacs-lisp
   (setq default-tab-width 4)
   #+END_SRC  

** C++ / C

   #+BEGIN_SRC emacs-lisp
   (c-add-style "work"
	'((indent-tabs-mode . nil)
	    (c-basic-offset . 4)
	    (c-offsets-alist
	    (substatement-open . 0)
	    (case-label . +)
	    (inline-open . 0)
	    (block-open . 0)
	    (statement-cont . +)
	    (inextern-lang . 0)
	    (innamespace . 0)
	    (arglist-cont-nonempty (my-c-lineup-arglist-lambda c-lineup-arglist)))))
   (setq c-default-style "work")
   #+END_SRC

* Packages
** Evil

   Evil mode is a vi emulation layer on top of emacs, basically merging the best parts of vim and emacs.
   
   #+BEGIN_SRC emacs-lisp
   (use-package evil
     :ensure t
     :config (evil-mode 1))

   (use-package evil-surround
     :ensure t
     :config
     (global-evil-surround-mode 1))

   (use-package evil-leader
     :ensure t
     :config 
     (global-evil-leader-mode)
     (evil-leader/set-leader ",")
     (evil-leader/set-key
       "w" 'save-buffer
       "f" 'projectile-find-file
       "b" 'helm-mini
       "r" 'compile))
     
   (use-package evil-goggles
     :ensure t
     :config
     (evil-goggles-mode)
     (setq evil-goggles-pulse t)
     ;; optionally use diff-mode's faces; as a result, deleted text ;; will be highlighed with `diff-removed` face which is typically ;; some red color (as defined by the color theme)
     ;; other faces such as `diff-added` will be used for other actions
     (evil-goggles-use-diff-faces))
   #+END_SRC

** UI

   Color scheme
   
   #+BEGIN_SRC emacs-lisp
   (use-package afternoon-theme
     :ensure t
     :config
     (load-theme 'afternoon t))
   #+END_SRC
   
   Fira code support

   #+BEGIN_SRC emacs-lisp
   (defun fira-code-mode--make-alist (list)
    "Generate prettify-symbols alist from LIST."
    (let ((idx -1))
	(mapcar
	(lambda (s)
	(setq idx (1+ idx))
	(let* ((code (+ #Xe100 idx))
	    (width (string-width s))
	    (prefix ())
	    (suffix '(?\s (Br . Br)))
	    (n 1))
	(while (< n width)
	(setq prefix (append prefix '(?\s (Br . Bl))))
	(setq n (1+ n)))
	(cons s (append prefix suffix (list (decode-char 'ucs code))))))
	list)))

    (defconst fira-code-mode--ligatures
    '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
	"{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
	"--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
	"#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
	".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
	"/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
	"|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
	"===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
	">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
	"<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
	"<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
	"<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
	"x" ":" "+" "+" "*"))

    (defvar fira-code-mode--old-prettify-alist)

    (defun fira-code-mode--enable ()
	"Enable Fira Code ligatures in current buffer."
	(setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
	(setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
	(prettify-symbols-mode t))

    (defun fira-code-mode--disable ()
	"Disable Fira Code ligatures in current buffer."
	(setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
	(prettify-symbols-mode -1))

    (define-minor-mode fira-code-mode
	"Fira Code ligatures minor mode"
	:lighter " Fira Code"
	(setq-local prettify-symbols-unprettify-at-point 'right-edge)
	(if fira-code-mode
	    (fira-code-mode--enable)
	    (fira-code-mode--disable)))

    (defun fira-code-mode--setup ()
	"Setup Fira Code Symbols"
	(set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

    (provide 'fira-code-mode)
   #+END_SRC

   Adds rainbow delimiters useful for large code blocks/lisps and many other reasons.

   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :ensure t
     :config
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC

   Centers the buffer to the middle of the emacs window

   #+BEGIN_SRC emacs-lisp
     ;; (use-package automargin
     ;;   :ensure t
     ;;   :config
     ;;   (automargin-mode))
   #+END_SRC

   Side bar file manager / project viewer
   
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs
     :ensure t
     :defer t
     :init
     (with-eval-after-load 'winum
       (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
     :config
       (progn
	 (setq treemacs-collapse-dirs 
	   (if (executable-find "python3") 3 0)
	     treemacs-deferred-git-apply-delay      0.5
	     treemacs-display-in-side-window        t
	     treemacs-eldoc-display                 t
	     treemacs-file-event-delay              5000
	     treemacs-file-follow-delay             0.2
	     treemacs-follow-after-init             t
	     treemacs-git-command-pipe              ""
	     treemacs-goto-tag-strategy             'refetch-index
	     treemacs-indentation                   2
	     treemacs-indentation-string            " "
	     treemacs-is-never-other-window         nil
	     treemacs-max-git-entries               5000
	     treemacs-missing-project-action        'ask
	     treemacs-no-png-images                 nil
	     treemacs-no-delete-other-windows       t
	     treemacs-project-follow-cleanup        nil
	     treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	     treemacs-recenter-distance             0.1
	     treemacs-recenter-after-file-follow    nil
	     treemacs-recenter-after-tag-follow     nil
	     treemacs-recenter-after-project-jump   'always
	     treemacs-recenter-after-project-expand 'on-distance
	     treemacs-show-cursor                   nil
	     treemacs-show-hidden-files             t
	     treemacs-silent-filewatch              nil
	     treemacs-silent-refresh                nil
	     treemacs-sorting                       'alphabetic-desc
	     treemacs-space-between-root-nodes      t
	     treemacs-tag-follow-cleanup            t
	     treemacs-tag-follow-delay              1.5
	     treemacs-width                         35)

	;; The default width and height of the icons is 22 pixels. If you are
	;; using a Hi-DPI display, uncomment this to double the icon size.
	;;(treemacs-resize-icons 44)

	(treemacs-follow-mode t)
	(treemacs-filewatch-mode t)
	(treemacs-fringe-indicator-mode t)
	(pcase (cons (not (null (executable-find "git")))
		    (not (null (executable-find "python3"))))
	(`(t . t)
	(treemacs-git-mode 'deferred))
	(`(t . _)
	(treemacs-git-mode 'simple))))
    :bind
    (:map global-map
	    ("M-0"       . treemacs-select-window)
	    ("C-x t 1"   . treemacs-delete-other-windows)
	    ("C-x t t"   . treemacs)
	    ("C-x t B"   . treemacs-bookmark)
	    ("C-x t C-t" . treemacs-find-file)
	    ("C-x t M-t" . treemacs-find-tag)))

   (use-package treemacs-evil
     :after treemacs evil
     :ensure t)

   (use-package treemacs-projectile
     :after treemacs projectile
     :ensure t)

   (use-package treemacs-icons-dired
     :after treemacs dired
     :ensure t
     :config (treemacs-icons-dired-mode))

   (use-package treemacs-magit
     :after treemacs magit
     :ensure t)
   #+END_SRC
   
   Highlight todo's and tags

   #+BEGIN_SRC emacs-lisp
   (use-package hl-todo
     :ensure t
     :config
     (global-hl-todo-mode))
   #+END_SRC
   
   Listing file stuff
   
   #+BEGIN_SRC emacs-lisp
   (use-package imenu-list
     :ensure t
     :config
     (global-set-key (kbd "C-'") #'imenu-list-smart-toggle)
     (setq imenu-list-focus-after-activation t)
     (setq imenu-list-auto-resize t))

   #+END_SRC

** Git
   
   Magit is an amazing git client for emacs, one of emacs's killer features.
   
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t)
   #+END_SRC
   
   Makes magit work well with evil mode
   
   #+BEGIN_SRC emacs-lisp
   (use-package evil-magit
     :ensure t
     :config
     (evil-mode 1))
   #+END_SRC

** Utilities
   
   Project manager 

   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :config
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
     (projectile-mode +1))
     
   (use-package helm-projectile
     :ensure t)
   #+END_SRC

   Which key shows you the possible next command you could do, so if you type C+x then wait, a list of possible next commands will show up, with a description.

   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config
     (which-key-mode)
     (which-key-setup-side-window-bottom))
   #+END_SRC
   
   Helm mode
   
   #+BEGIN_SRC emacs-lisp
   (use-package helm
     :ensure t
     :config
     (helm-mode 1)
       (global-set-key (kbd "M-x") #'helm-M-x)
       (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
       (global-set-key (kbd "C-x C-f") #'helm-find-files))
   #+END_SRC
   
   For html exporting and stuff
   
   #+BEGIN_SRC emacs-lisp
   (use-package htmlize
     :ensure t)
   #+END_SRC

** Org
   
   Org babel languages
   
   #+BEGIN_SRC emacs-lisp
   (defadvice org-babel-execute-src-block (around load-language nil activate)
    "Load language if needed"
    (let ((language (org-element-property :language (org-element-at-point))))
    (unless (cdr (assoc (intern language) org-babel-load-languages))
    (add-to-list 'org-babel-load-languages (cons (intern language) t))
    (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
    ad-do-it))
   #+END_SRC
   
   Auto complete todos that have sub todo's all done
   
   #+BEGIN_SRC emacs-lisp
   (defun org-summary-todo (n-done n-not-done)
   "Switch entry to DONE when all subentries are done, to TODO otherwise."
   (let (org-log-done org-log-states)   ; turn off logging
(org-todo (if (= n-not-done 0) "DONE" "TODO"))))

   (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
   #+END_SRC

   
   Sexy bullets for org mode
   
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :init
     (setq org-bullets-bullet-list
     '("◉" "◎" "<img draggable=\"false\" class=\"emoji\" alt=\"⚫\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/26ab.svg\">" "○" "►" "◇"))
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
   
   This makes org mode work well with evil mode (TODO) actually learn they keys
   
   #+BEGIN_SRC emacs-lisp
   (use-package org-evil
     :ensure t
     :config
     (add-hook 'org-mode-hook
       (lambda () (org-evil-mode 1))))
   #+END_SRC
   
   More export options
   
   #+BEGIN_SRC emacs-lisp
   (require 'org)
   (require 'ox-latex)
   #+END_SRC

** Language modes and configs
*** GLSL
    
    #+BEGIN_SRC emacs-lisp
    (use-package glsl-mode
      :ensure t)
    #+END_SRC

*** Nim

    #+BEGIN_SRC emacs-lisp
    (use-package nim-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.nim\\'" . nim-mode)))
    #+END_SRC

*** Lua

    #+BEGIN_SRC emacs-lisp
    (use-package lua-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
      (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))
    #+END_SRC

*** Rust

    #+BEGIN_SRC emacs-lisp
    (use-package rust-mode
      :ensure t
      :config
      (setq rust-format-on-save t))
     
    (use-package racer
      :ensure t
      :config
      (add-hook 'rust-mode-hook #'racer-mode)
      (add-hook 'racer-mode-hook #'eldoc-mode)
      (add-hook 'racer-mode-hook #'company-mode)
      (require 'rust-mode)
      (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
      (setq company-tooltip-align-annotations t))
    #+END_SRC
    
*** Scala
    
    #+BEGIN_SRC emacs-lisp
    (use-package scala-mode
      :ensure t)
    #+END_SRC

*** Python
    
    #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t
      :config
      (add-hook 'python-mode-hook 'jedi:setup))
    #+END_SRC

*** Haskell
*** OCaml

    #+BEGIN_SRC emacs-lisp
    (use-package tuareg
      :ensure t)
    #+END_SRC
    
*** C#
    
    #+BEGIN_SRC emacs-lisp
    (use-package omnisharp
      :ensure t
      :config
      (add-hook 'csharp-mode-hook 'omnisharp-mode)
      (add-hook 'csharp-mode-hook #'flycheck-mode)
      (setq omnisharp-server-executable-path "/home/dustin/Documents/omnisharp-linux-x64.tar/run")
      (setq omnisharp-debug nil))
    #+END_SRC

*** F#
    
    #+BEGIN_SRC emacs-lisp
    (use-package fsharp-mode
      :defer t
      :ensure t
      :config
      (setq inferior-fsharp-program "/usr/bin/fsharpi --readline-"))
    #+END_SRC
    
*** Typescript
    
    #+BEGIN_SRC emacs-lisp
    (defun setup-tide-mode ()
      "Docs."
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1))

    (use-package tide
      :ensure t
      :config
      (add-hook 'before-save-hook 'tide-format-before-save)
      (add-hook 'typescript-mode-hook #'setup-tide-mode))
    #+END_SRC

*** Fennel

    #+BEGIN_SRC    
    (use-package fennel-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.fnl\\'" . fennel-mode)))
    #+END_SRC

*** Common lisp
    
    #+BEGIN_SRC emacs-lisp
    (use-package slime
      :ensure t
      :config
      (add-to-list 'slime-contribs 'slime-fancy)
      (setq inferior-lisp-program "/usr/bin/sbcl")
      (require 'slime-asdf))
    #+END_SRC

*** Clojure

    #+BEGIN_SRC emacs-lisp
    (use-package cider
      :ensure t)
    (setq exec-path (append exec-path '("~/.scripts/")))
    #+END_SRC

** Auto completion and syntax stuff
   
   Language server based error checking
   
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t
     :init (global-flycheck-mode)
     :config
     (add-hook 'c++-mode-hook
       (lambda ()
         (put 'flycheck-disabled-checkers 'safe-local-variable #'listp)
	 (setq flycheck-clang-standard-library "libstdc++")
	 (setq flycheck-clang-language-standard "c++17"))))
   #+END_SRC

   Auto completion engine using company mode
   
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :config
     (add-hook 'after-init-hook 'global-company-mode)
     (eval-after-load
       'company
       '(add-to-list 'company-backends 'company-omnisharp))
     (add-hook 'csharp-mode-hook #'company-mode)
     (setq company-idle-delay 0)
     (setq company-minimum-prefix-length 1)
     (setq company-tooltip-align-annotations t))
   #+END_SRC
   
